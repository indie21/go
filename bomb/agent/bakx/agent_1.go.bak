//http://my.oschina.net/yunfound/blog/141222

package main

import (
	"fmt"
	"net"
	//"os"
	"time"
)

const (
	MAX_CONN_NUM = 5
)

//
func EchoFun(conn net.Conn) {
	defer conn.Close()
	buf := make([]byte, 1024)
	for {
		_, err := conn.Read(buf)
		if err != nil {
			return
		}

		_, err = conn.Write(buf)
		if err != nil {
			return
		}
	}
}


func main() {
	listener, err := net.Listen("tcp", "0.0.0.0:8080")
	if err != nil {
		fmt.Printf("error listening: %s\n", err.Error())
	}
	defer listener.Close()

	fmt.Printf("%s\n", "Running")
	var cur_conn_num = 0
	conn_chan := make(chan net.Conn)
	conn_change := make(chan int)
	go func() {
		for conn_change := range conn_change {
			cur_conn_num += conn_change
		}
	} ()

	go func () {
		for _  = range time.Tick(1e8) {
			fmt.Printf("conn num %d\n", cur_conn_num)
		}
	} ()

	for i := 0 ; i< MAX_CONN_NUM ; i ++ {
		go func() {
			for conn := range conn_chan {
				conn_change <- 1
				EchoFun(conn)
				conn_change <- -1
			}
		} ()
	}

	for  {
		conn, err := listener.Accept()
		if err != nil {
			fmt.Printf("Error Accept %s\n", err.Error())
			return
		}

		conn_chan <- conn
	}
}
